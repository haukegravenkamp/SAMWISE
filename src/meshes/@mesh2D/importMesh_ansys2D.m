function femMesh=importMesh_ansys2D(meshfile)

%% importMesh_ansys2D
% reads a .dat file containing vertex coordinates and connectivity as 
% generated by Ansys and returns a structure containing the mesh
% information
% INPUT: 
%   meshfile - string of file name including '.dat'
% OUTPUT:
%   femMesh - structure with fields
%       vertices: table of vertex coordinates
%       connectivity: element connectivity matrix (each row is one element)
%       bodyElem: first and last element number of each 'body' defined by
%           ansys. Can be important if the geometry consists of several
%           parts with, e.g., different materials.
%
% Note: This function is for 2D meshes only! The extension to 3D should be
% trivial though...

%   2012-2024 Hauke Gravenkamp, gravenkamp.research@gmail.com
 

%% READ ANSYS .DAT FILE AND STORE COORDINATES AND CONNECTIVITY
% creates temporary files for each 'body' defined by ansys

fid = fopen(meshfile);                                                      % open ansys mesh file
fidV = fopen('tempVertices.m','wt');                                        % create temporary files for storing vertices and connectivity
fidt = fopen('tempConnectivity.m','wt');

targetfile=fidV;                                                            % current file to write
tline = fgetl(fid);                                                         % current line

numbody=1;                                                                  % number of current body to read
bodyfinished=0;                                                             % state: current body read, checking if there's more!

while ischar(tline)                                                         
    
    if bodyfinished                                                         % if a body is finished importing
        if ~isempty(tline) && (numel(tline)>4) &&...
                (sum(tline(1:5)=='     ')==5)                               % if there is another body
            numbody=numbody+1;                                              % update body counter
            fclose(fidt);                                                   % close connectivity file
            fidt = fopen(['tempConnectivity',num2str(numbody),'.m'],'wt');  % open new connectivity file
            bodyfinished=0;
        end
    end
    
    if (length(tline)>1)&&strcmp(tline(1:2),'-1')                           % end of block
        if targetfile==fidt                                                 % if this is the end of a connectivity block 
            bodyfinished=1;                                                 % one body is finished
            disp(['reading body ',num2str(numbody),' finished'])
            
        else                                                                % this the end of a vertices block   
            targetfile=fidt;                                                % set target file to connectivity
        end
    elseif ~bodyfinished && ~isempty(tline) && (tline(1)==' ')              % inside a block
        fprintf(targetfile,[tline,'\n']);                                   % print in target file
    end
    
    tline = fgetl(fid);                                                     % get next line
end

fclose(fid);
fclose(fidV);
fclose(fidt);


%% LOAD COORDINATES AND CONNECTIVITY FROM TEMPORARY FILES AND STORE IN MESH STRUCTURE

bodyFiles = dir('tempConnectivity*.m');                                     % file(s) that contain connectivity information

nVert=0;                                                                    % vertex counter

tempVertices=[];
load('tempVertices.m');                                                     % load vertex coordinates
vert=tempVertices(:,2:3);

connectivity{numbody,1}=[];                                        % allocate connectivity for each body
bodyElem=zeros(numbody,2);                                         % allocate element numbers for each body
eleCount=0;                                                                 % element counter

for ibody=1:numbody                                                % loop bodies
    
    
    tn=bodyFiles(ibody).name(1:end-2);                                      % current file name
    try
        load(bodyFiles(ibody).name);                                        % load file
    catch
        numbody=numbody-1;
        continue
    end
    eval(['con=',tn,';'])                                                   % create variable 'con'
    con=con(:,12:15);                                                       % select columns containing connectivity
    nvertnew=max(con(:));                                                   % largest vertex number
    ind=(con(:,4)==con(:,3));                                               % find elements where 3rd and 4th index are identical (triangles)
    con(ind,4)=nan;                                                         % replace duplicate vertices by nans
    
    nVert=max(nVert,nvertnew);
    
    connectivity{ibody}=con;
    bodyElem(ibody,:)=eleCount+[1,size(con,1)];
    eleCount=eleCount+size(con,1);
    
end
bodyElem=bodyElem(1:numbody,:);

femMesh.vertices=vert(1:nVert,:);
% femMesh.vertices=vert;
connectivity=cell2mat(connectivity);
if sum(~isnan(connectivity(:,end)))==0                                      % if last column contains only nans (only triangles)
    connectivity=connectivity(:,1:end-1);                                   % remove last column
end

femMesh.connectivity=connectivity;
femMesh.bodyElem=bodyElem;


delete tempConnectivity*.m
delete tempVertices*.m
end
